{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mihai\\\\Desktop\\\\Projects\\\\GIT\\\\WolvesProject\\\\wolves-project\\\\src\\\\components\\\\container\\\\withFetch.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction withFetch(WrappedComponent, requestUrl) {\n  var _s = $RefreshSig$();\n\n  const WithFetch = props => {\n    _s();\n\n    const [data, setData] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n    useEffect(() => {\n      if (requestUrl) fetchData(requestUrl);\n    }, []);\n\n    const fetchData = async requestUrl => {\n      setIsLoading(true);\n      setIsError(false);\n\n      try {\n        const response = await fetch(requestUrl);\n\n        if (response.ok) {\n          const data = await response.json();\n          setIsLoading(false);\n          setData(data);\n        } else {\n          throw new Error('Fetch request error');\n        }\n      } catch (err) {\n        setIsLoading(false);\n        setIsError(err);\n      }\n    };\n\n    return /*#__PURE__*/_jsxDEV(WrappedComponent, {\n      data: data,\n      isLoading: isLoading,\n      isError: isError,\n      ...props,\n      getData: requestUrl => fetchData(requestUrl)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  };\n\n  _s(WithFetch, \"6EDkcU5PbuSsesaofET2GVZ0HMs=\");\n\n  return WithFetch;\n}\n\nexport default withFetch;","map":{"version":3,"sources":["C:/Users/Mihai/Desktop/Projects/GIT/WolvesProject/wolves-project/src/components/container/withFetch.jsx"],"names":["React","useEffect","useState","withFetch","WrappedComponent","requestUrl","WithFetch","props","data","setData","isLoading","setIsLoading","isError","setIsError","fetchData","response","fetch","ok","json","Error","err"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,SAASC,SAAT,CAAmBC,gBAAnB,EAAqCC,UAArC,EAAiD;AAAA;;AAC/C,QAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAC3B,UAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,UAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;AACA,UAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,KAAD,CAAtC;AAEAD,IAAAA,SAAS,CAAC,MAAM;AACd,UAAII,UAAJ,EAAgBS,SAAS,CAACT,UAAD,CAAT;AACjB,KAFQ,EAEN,EAFM,CAAT;;AAIA,UAAMS,SAAS,GAAG,MAAOT,UAAP,IAAsB;AACtCM,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,MAAAA,UAAU,CAAC,KAAD,CAAV;;AAEA,UAAI;AACF,cAAME,QAAQ,GAAG,MAAMC,KAAK,CAACX,UAAD,CAA5B;;AACA,YAAIU,QAAQ,CAACE,EAAb,EAAiB;AACf,gBAAMT,IAAI,GAAG,MAAMO,QAAQ,CAACG,IAAT,EAAnB;AAEAP,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,UAAAA,OAAO,CAACD,IAAD,CAAP;AACD,SALD,MAKO;AACL,gBAAM,IAAIW,KAAJ,CAAU,qBAAV,CAAN;AACD;AACF,OAVD,CAUE,OAAOC,GAAP,EAAY;AACZT,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,UAAU,CAACO,GAAD,CAAV;AACD;AACF,KAlBD;;AAoBA,wBACE,QAAC,gBAAD;AACE,MAAA,IAAI,EAAEZ,IADR;AAEE,MAAA,SAAS,EAAEE,SAFb;AAGE,MAAA,OAAO,EAAEE,OAHX;AAAA,SAIML,KAJN;AAKE,MAAA,OAAO,EAAGF,UAAD,IAAgBS,SAAS,CAACT,UAAD;AALpC;AAAA;AAAA;AAAA;AAAA,YADF;AASD,GAtCD;;AAD+C,KACzCC,SADyC;;AAyC/C,SAAOA,SAAP;AACD;;AAED,eAAeH,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nfunction withFetch(WrappedComponent, requestUrl) {\r\n  const WithFetch = (props) => {\r\n    const [data, setData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isError, setIsError] = useState(false);\r\n\r\n    useEffect(() => {\r\n      if (requestUrl) fetchData(requestUrl);\r\n    }, []);\r\n\r\n    const fetchData = async (requestUrl) => {\r\n      setIsLoading(true);\r\n      setIsError(false);\r\n\r\n      try {\r\n        const response = await fetch(requestUrl);\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n\r\n          setIsLoading(false);\r\n          setData(data);\r\n        } else {\r\n          throw new Error('Fetch request error');\r\n        }\r\n      } catch (err) {\r\n        setIsLoading(false);\r\n        setIsError(err);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <WrappedComponent\r\n        data={data}\r\n        isLoading={isLoading}\r\n        isError={isError}\r\n        {...props}\r\n        getData={(requestUrl) => fetchData(requestUrl)}\r\n      />\r\n    );\r\n  };\r\n\r\n  return WithFetch;\r\n}\r\n\r\nexport default withFetch;\r\n"]},"metadata":{},"sourceType":"module"}